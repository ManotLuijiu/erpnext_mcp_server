{
  "version": 3,
  "sources": ["../../../../../apps/erpnext_mcp_server/erpnext_mcp_server/public/js/erpnext_mcp_server.bundle.js"],
  "sourcesContent": ["frappe.provide('frappe.chat_mcp');\n\n/**\n * MCP Client for Chat Integration\n * This client allows the chat bot to communicate with the MCP server\n */\nclass ChatMCPClient {\n    constructor() {\n        this.mcpServerRunning = false;\n        this.mcp_base_url = null;\n        this.initMCPStatus();\n    }\n\n    async initMCPStatus() {\n        try {\n            // First check if MCP info is available in boot\n            if (frappe.boot.mcp_server) {\n                this.mcpServerRunning = frappe.boot.mcp_server.is_running;\n                \n                // Set the base URL based on transport type\n                if (this.mcpServerRunning) {\n                    const transport = frappe.boot.mcp_server.transport;\n                    const port = frappe.boot.mcp_server.port || 8000;\n                    \n                    if (transport === 'sse') {\n                        // For SSE transport, use regular HTTP endpoint\n                        this.mcp_base_url = frappe.urllib.get_base_url() + '/api/mcp';\n                    } else {\n                        // For stdio transport, we need to use our proxy\n                        this.mcp_base_url = frappe.urllib.get_base_url() + '/api/method/erpnext_mcp_server.erpnext_mcp_server.api.mcp_proxy.query';\n                    }\n                }\n                \n                return;\n            }\n            \n            // If not in boot, check status via API\n            // const response = await this.checkMCPServerStatus();\n            // this.mcpServerRunning = response.is_running;\n            \n            // Set the base URL based on transport type\n            if (this.mcpServerRunning) {\n                if (response.transport === 'sse') {\n                    // For SSE transport, use regular HTTP endpoint \n                    this.mcp_base_url = frappe.urllib.get_base_url() + '/api/mcp';\n                } else {\n                    // For stdio transport, we need to use our proxy\n                    this.mcp_base_url = frappe.urllib.get_base_url() + '/api/method/erpnext_mcp_server.erpnext_mcp_server.api.mcp_proxy.query';\n                }\n            }\n        } catch (error) {\n            console.error(\"Failed to check MCP server status:\", error);\n            this.mcpServerRunning = false;\n        }\n    }\n\n    // async checkMCPServerStatus() {\n    //     // Check if MCP server is running\n    //     try {\n    //         const response = await frappe.call({\n    //             method: \"erpnext_mcp_server.erpnext_mcp_server.api.mcp_server.get_status\",\n    //             async: true\n    //         });\n            \n    //         return response.message || { is_running: false, status: 'Unknown' };\n    //     } catch (error) {\n    //         console.error(\"Error checking MCP status:\", error);\n    //         return { is_running: false, status: 'Error' };\n    //     }\n    // }\n\n    async startMCPServer() {\n        try {\n            const response = await frappe.call({\n                method: \"erpnext_mcp_server.erpnext_mcp_server.api.mcp_server.start_server\",\n                async: true\n            });\n            \n            if (response.message && response.message.status === 'success') {\n                // Wait a moment for the server to start\n                await new Promise(resolve => setTimeout(resolve, 2000));\n                \n                // Check status again\n                await this.initMCPStatus();\n                return { success: this.mcpServerRunning };\n            }\n            \n            return { success: false, message: response.message?.message || 'Failed to start MCP server' };\n        } catch (error) {\n            console.error(\"Error starting MCP server:\", error);\n            return { success: false, message: error.message || 'Unknown error' };\n        }\n    }\n\n    async stopMCPServer() {\n        try {\n            const response = await frappe.call({\n                method: \"erpnext_mcp_server.erpnext_mcp_server.api.mcp_server.stop_server\",\n                async: true\n            });\n            \n            if (response.message && response.message.status === 'success') {\n                this.mcpServerRunning = false;\n                return { success: true };\n            }\n            \n            return { success: false, message: response.message?.message || 'Failed to stop MCP server' };\n        } catch (error) {\n            console.error(\"Error stopping MCP server:\", error);\n            return { success: false, message: error.message || 'Unknown error' };\n        }\n    }\n\n    async queryMCP(query, context = {}) {\n        if (!this.mcpServerRunning || !this.mcp_base_url) {\n            return { error: 'MCP server is not running. Please start the server first.' };\n        }\n        \n        try {\n            // Format the query for MCP\n            const payload = {\n                query: query,\n                context: context\n            };\n            \n            // Send request to the MCP server through our proxy\n            const response = await frappe.call({\n                method: \"erpnext_mcp_server.erpnext_mcp_server.api.mcp_proxy.query\",\n                args: payload,\n                async: true\n            });\n            \n            return response.message || { error: 'No response from MCP server' };\n        } catch (error) {\n            console.error(\"Error querying MCP:\", error);\n            return { error: error.message || 'Failed to query MCP server' };\n        }\n    }\n\n    isRunning() {\n        return this.mcpServerRunning;\n    }\n}\n\n// Create a global instance for reuse\nfrappe.chat_mcp = new ChatMCPClient();\n\n// Keep the MCP status updated\n$(document).ready(function() {\n    // Update MCP status every 30 seconds\n    setInterval(function() {\n        if (frappe.chat_mcp) {\n            frappe.chat_mcp.initMCPStatus();\n        }\n    }, 30000);\n});"],
  "mappings": "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",
  "names": ["response"]
}
